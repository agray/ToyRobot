using NUnit.Framework;
using ToyRobot.Core;
using ToyRobot.Test.Base;

namespace ToyRobot.Test.PlacementTests {
    public class PlaceToyRobotTests : TestBase {
        [Test]
        [TestCase(0, 0, Direction.NORTH)]
        [TestCase(0, 0, Direction.EAST)]
        [TestCase(0, 0, Direction.SOUTH)]
        [TestCase(0, 0, Direction.WEST)]
        [TestCase(0, 1, Direction.NORTH)]
        [TestCase(0, 1, Direction.EAST)]
        [TestCase(0, 1, Direction.SOUTH)]
        [TestCase(0, 1, Direction.WEST)]
        [TestCase(0, 2, Direction.NORTH)]
        [TestCase(0, 2, Direction.EAST)]
        [TestCase(0, 2, Direction.SOUTH)]
        [TestCase(0, 2, Direction.WEST)]
        [TestCase(0, 3, Direction.NORTH)]
        [TestCase(0, 3, Direction.EAST)]
        [TestCase(0, 3, Direction.SOUTH)]
        [TestCase(0, 3, Direction.WEST)]
        [TestCase(0, 4, Direction.NORTH)]
        [TestCase(0, 4, Direction.EAST)]
        [TestCase(0, 4, Direction.SOUTH)]
        [TestCase(0, 4, Direction.WEST)]
        [TestCase(1, 0, Direction.NORTH)]
        [TestCase(1, 0, Direction.EAST)]
        [TestCase(1, 0, Direction.SOUTH)]
        [TestCase(1, 0, Direction.WEST)]
        [TestCase(1, 1, Direction.NORTH)]
        [TestCase(1, 1, Direction.EAST)]
        [TestCase(1, 1, Direction.SOUTH)]
        [TestCase(1, 1, Direction.WEST)]
        [TestCase(1, 2, Direction.NORTH)]
        [TestCase(1, 2, Direction.EAST)]
        [TestCase(1, 2, Direction.SOUTH)]
        [TestCase(1, 2, Direction.WEST)]
        [TestCase(1, 3, Direction.NORTH)]
        [TestCase(1, 3, Direction.EAST)]
        [TestCase(1, 3, Direction.SOUTH)]
        [TestCase(1, 3, Direction.WEST)]
        [TestCase(1, 4, Direction.NORTH)]
        [TestCase(1, 4, Direction.EAST)]
        [TestCase(1, 4, Direction.SOUTH)]
        [TestCase(1, 4, Direction.WEST)]
        [TestCase(2, 0, Direction.NORTH)]
        [TestCase(2, 0, Direction.EAST)]
        [TestCase(2, 0, Direction.SOUTH)]
        [TestCase(2, 0, Direction.WEST)]
        [TestCase(2, 1, Direction.NORTH)]
        [TestCase(2, 1, Direction.EAST)]
        [TestCase(2, 1, Direction.SOUTH)]
        [TestCase(2, 1, Direction.WEST)]
        [TestCase(2, 2, Direction.NORTH)]
        [TestCase(2, 2, Direction.EAST)]
        [TestCase(2, 2, Direction.SOUTH)]
        [TestCase(2, 2, Direction.WEST)]
        [TestCase(2, 3, Direction.NORTH)]
        [TestCase(2, 3, Direction.EAST)]
        [TestCase(2, 3, Direction.SOUTH)]
        [TestCase(2, 3, Direction.WEST)]
        [TestCase(2, 4, Direction.NORTH)]
        [TestCase(2, 4, Direction.EAST)]
        [TestCase(2, 4, Direction.SOUTH)]
        [TestCase(2, 4, Direction.WEST)]
        [TestCase(3, 0, Direction.NORTH)]
        [TestCase(3, 0, Direction.EAST)]
        [TestCase(3, 0, Direction.SOUTH)]
        [TestCase(3, 0, Direction.WEST)]
        [TestCase(3, 1, Direction.NORTH)]
        [TestCase(3, 1, Direction.EAST)]
        [TestCase(3, 1, Direction.SOUTH)]
        [TestCase(3, 1, Direction.WEST)]
        [TestCase(3, 2, Direction.NORTH)]
        [TestCase(3, 2, Direction.EAST)]
        [TestCase(3, 2, Direction.SOUTH)]
        [TestCase(3, 2, Direction.WEST)]
        [TestCase(3, 3, Direction.NORTH)]
        [TestCase(3, 3, Direction.EAST)]
        [TestCase(3, 3, Direction.SOUTH)]
        [TestCase(3, 3, Direction.WEST)]
        [TestCase(3, 4, Direction.NORTH)]
        [TestCase(3, 4, Direction.EAST)]
        [TestCase(3, 4, Direction.SOUTH)]
        [TestCase(3, 4, Direction.WEST)]
        [TestCase(4, 0, Direction.NORTH)]
        [TestCase(4, 0, Direction.EAST)]
        [TestCase(4, 0, Direction.SOUTH)]
        [TestCase(4, 0, Direction.WEST)]
        [TestCase(4, 1, Direction.NORTH)]
        [TestCase(4, 1, Direction.EAST)]
        [TestCase(4, 1, Direction.SOUTH)]
        [TestCase(4, 1, Direction.WEST)]
        [TestCase(4, 2, Direction.NORTH)]
        [TestCase(4, 2, Direction.EAST)]
        [TestCase(4, 2, Direction.SOUTH)]
        [TestCase(4, 2, Direction.WEST)]
        [TestCase(4, 3, Direction.NORTH)]
        [TestCase(4, 3, Direction.EAST)]
        [TestCase(4, 3, Direction.SOUTH)]
        [TestCase(4, 3, Direction.WEST)]
        [TestCase(4, 4, Direction.NORTH)]
        [TestCase(4, 4, Direction.EAST)]
        [TestCase(4, 4, Direction.SOUTH)]
        [TestCase(4, 4, Direction.WEST)]
        public void ValidPlacementTest(int x, int y, Direction direction) {
            badRobot.Place(x, y, direction);
            Assert.AreEqual(x, badRobot.CurrentPosture.Position.X);
            Assert.AreEqual(y, badRobot.CurrentPosture.Position.Y);
            Assert.AreEqual(direction, badRobot.CurrentPosture.Direction);
        }

        [Test]
        [TestCase(-1, 0, Direction.NORTH)]
        [TestCase(-1, 0, Direction.EAST)]
        [TestCase(-1, 0, Direction.SOUTH)]
        [TestCase(-1, 0, Direction.WEST)]
        [TestCase(0, -1, Direction.NORTH)]
        [TestCase(0, -1, Direction.EAST)]
        [TestCase(0, -1, Direction.SOUTH)]
        [TestCase(0, -1, Direction.WEST)]
        [TestCase(5, 0, Direction.NORTH)]
        [TestCase(5, 0, Direction.EAST)]
        [TestCase(5, 0, Direction.SOUTH)]
        [TestCase(5, 0, Direction.WEST)]
        [TestCase(0, 5, Direction.NORTH)]
        [TestCase(0, 5, Direction.EAST)]
        [TestCase(0, 5, Direction.SOUTH)]
        [TestCase(0, 5, Direction.WEST)]
        public void InvalidPlacementTest(int x, int y, Direction direction) {
            badRobot.Place(x, y, direction);
            Assert.AreEqual(null, badRobot.CurrentPosture);
        }
    }
}